name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  pull-requests: write  # For PR comments
  checks: write        # For test results
  
env:
  DOTNET_VERSION: '8.0.x'
  PROJECT_PATH: 'SARS.TaxCalculator/SARS.TaxCalculator.csproj'
  TEST_PATH: 'SARS.TaxCalculator.Tests/SARS.TaxCalculator.Tests.csproj'

jobs:
  test:
    name: Build and Test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write  # For PR comments
      checks: write        # For test results
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build solution
      run: dotnet build --no-restore --configuration Release
      
    - name: Run tests
      run: dotnet test --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage
      
    - name: Generate coverage report
      uses: danielpalme/ReportGenerator-GitHub-Action@5.2.0
      with:
        reports: 'coverage/**/coverage.cobertura.xml'
        targetdir: 'coverage-report'
        reporttypes: 'HtmlInline_AzurePipelines;Cobertura;MarkdownSummary'
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage-report/Cobertura.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Comment PR with coverage
      if: github.event_name == 'pull_request'
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        recreate: true
        path: coverage-report/Summary.md
        
    - name: Validate package can be created
      run: dotnet pack ${{ env.PROJECT_PATH }} --no-build --configuration Release --output ./artifacts
      
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: ./artifacts/*.nupkg
        retention-days: 7

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build solution
      run: dotnet build --no-restore --configuration Release
      
    - name: Check for XML documentation warnings
      run: |
        BUILD_OUTPUT=$(dotnet build --no-restore --configuration Release --verbosity normal 2>&1)
        echo "$BUILD_OUTPUT"
        if echo "$BUILD_OUTPUT" | grep -q "warning CS1591"; then
          echo "❌ XML documentation warnings found"
          exit 1
        else
          echo "✅ No XML documentation warnings"
        fi
        
    - name: Run dotnet format check
      run: dotnet format --verify-no-changes --verbosity diagnostic

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Run security audit
      run: dotnet list package --vulnerable --include-transitive